%package "oberon0.parser";
%class "OberonParser";

%terminals begin,end,module,import_,procedure;
%terminals if_,while_,then,do_,else_,else_if,repeat,until,or;
%terminals array,of,record,var,const_,char_,integer,long_,type_dec;
%terminals identifier,number,string_literal;
%terminals par_open,par_close,dot,comma,colon,semicolon,tilde;
%terminals brack_open,brack_close,pipe,star,div,mod,amp;
%terminals plus,minus,eq,hash,st,seq,gt,geq,assign;

%typeof integer = "Number";
%typeof string_literal, identifier = "String";

%goal Module;

Selector =
        dot identifier
    |   brack_open Expression brack_close
    |   Selector Selector
    ;

Factor =
        identifier Selector
    |   number
    |   par_open Expression par_close
    |   tilde Factor
    |   string_literal
    ;

Operator =
        star
    |   div
    |   mod
    |   amp
    ;

Term =
        Factor
    |   Term Operator Factor
    ;

PlusMinOperator =
        plus
    |   minus
    ;

ExpressionOperator =
        PlusMinOperator
    |   or
    ;

LogicalOperator =
        eq
    |   hash
    |   st
    |   seq
    |   gt
    |   geq
    |   pipe
    ;

SimpleExpression =
        PlusMinOperator? Term
    |   SimpleExpression ExpressionOperator Term
    ;

Expression =
        SimpleExpression
    |   SimpleExpression LogicalOperator SimpleExpression
    ;

Assignment = identifier Selector assign Expression;

ActualParameters =
        par_open par_close
    |   par_open CommaSeparatedExpressions par_close
    ;

CommaSeparatedExpressions =
        Expression
    |   CommaSeparatedExpressions comma Expression
    ;

ProcedureCall =
        identifier Selector
    |   identifier Selector ActualParameters
    ;

IfStatementStart = if_ Expression then StatementSequence;

ElseIfStatement =
        else_if Expression then StatementSequence
    |   ElseIfStatement ElseIfStatement
    ;

ElseStatement = else_ StatementSequence end;

IfStatement =
        IfStatementStart
    |   IfStatementStart ElseIfStatement
    |   IfStatementStart ElseStatement
    |   IfStatementStart ElseIfStatement ElseStatement
    ;

WhileStatement = while_ Expression do_ StatementSequence end;

RepeatStatement = repeat StatementSequence until Expression semicolon;

Statement =
        Assignment
    |   ProcedureCall
    |   IfStatement
    |   WhileStatement
    |   RepeatStatement
    ;

StatementSequence =
        Statement
    |   StatementSequence semicolon StatementSequence
    ;

IdentifierList =
        identifier
    |   IdentifierList comma IdentifierList
    ;

ArrayType  = array Expression of Type;

FieldList = IdentifierList colon Type;

RecordType = record RecordTypeInner end;

RecordTypeInner =
        FieldList
    |   RecordTypeInner semicolon RecordTypeInner
    ;

Type =
        identifier
    |   ArrayType
    |   RecordType
    |   integer
    |   long_
    |   char_
    ;

FPSection =
    |   IdentifierList colon Type
    |   var IdentifierList colon Type
    ;

FormalParameters =
        par_open par_close
    |   par_open FormalParametersInner par_close
    ;

FormalParametersInner =
        FPSection
    |   FormalParametersInner semicolon FormalParametersInner
    ;

ProcedureHeading =
        procedure identifier
    |   procedure identifier FormalParameters
    ;

ProcedureBody =
        Declarations end identifier
    |   Declarations begin StatementSequence end identifier
    ;

ProcedureDeclaration = ProcedureHeading semicolon ProcedureBody;

Declarations = ConstDeclaration? TypeDeclaration? VarDeclaration? ProcedureDeclaration* semicolon;

ConstDeclarationPart = identifier eq Expression semicolon;

TypeDeclarationPart = identifier eq Type semicolon;

VarDeclarationPart = IdentifierList eq Type semicolon;

ConstDeclaration =
        const_ ConstDeclarationPart*;

TypeDeclaration =
        type_dec TypeDeclarationPart*;

VarDeclaration =
        var VarDeclarationPart*;

Module = ModuleStart ImportStatement? Declarations ModuleBegin* ModuleEnd;

ModuleStart = module identifier semicolon;
ModuleEnd  = end identifier dot;
ImportStatement = import_ IdentifierList semicolon;
ModuleBegin = begin StatementSequence;