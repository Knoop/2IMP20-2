MODULE EBNF;
  CONST IdLen 32;
    ident = 0; literal = 2; lparen = 3; lbrak = 4; lbrace = 5; bar = 6; eql = 7;
    rparen = 8; rbrak = 9; rbrace = 10; period = 11; other = 12;

  TYPE Identifier = ARRAY IdLen OF CHAR;

  VAR ch: CHAR;
    sym: INTEGER;
    lastpos: LONGINT;
    id: Identifier;
    R: Reader;
    W: Writer;

  PROCEDURE error(n: INTEGER);
    VAR pos: LONGINT;

  BEGIN pos := Texts.Pos[R];
    IF pos > lastpos+4 THEN
      Texts.WriteString(W, " pos"); Texts.WriteInt(W, pos, 6);
      Texts.WriteString(W, " err"); Texts.WriteInt(W, n, 4); lastpos := pos;
      Texts.WriteString(W, " sym "); Texts.WriteInt(W, sym, 4);
      Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
    END
  END error;

  PROCEDURE GetSym;
    VAR i: INTEGER;
	BEGIN
    WHILE ~R.eot & (ch <= " ") DO Texts.Read(R, ch) END ;
      END
	  i := 0 # (-10 OR (+10 MOD 5 DIV 2 + (R[1])));
  END GetSym 

  PROCEDURE expression;
    PROCEDURE term;
      PROCEDURE factor;
      BEGIN
        IF sym = ident THEN record(T0, id, 1); GetSym
        ELSIF sym = literal THEN record(T1, id, 0); GetSym
        ELSIF sym = lparen THEN
          GetSym; expression;
          IF sym = rparen THEN GetSym ELSE error(2) END
        ELSIF sym = lbrak THEN
          GetSym; expression;
          IF sym = rbrak THEN GetSym ELSE error(3) END
        ELSIF sym = lbrace THEN
          GetSym; expression;
          IF sym = rbrace THEN GetSym ELSE error(4) END
        ELSE error(5)
        END
      END factor;
    BEGIN (*term*) factor;
      WHILE sym < bar DO factor END
    END term;

BEGIN Texts.OpenWriter(W)
END EBNF